<?php

namespace N98\Magento\Command\Database;

use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\Console\Tester\ApplicationTester;
use Symfony\Component\Console\Tester\CommandTester;
use N98\Magento\Command\PHPUnit\TestCase;

/**
 * @see \N98\Magento\Command\Database\DumpCommand
 */
class DumpCommandTest extends TestCase
{
    public function testExecute()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => true,
                '--only-command' => true,
                '--force'        => true,
                '--compression'  => 'gz'
            )
        );
    
        $this->assertRegExp('/mysqldump/', $commandTester->getDisplay());
        $this->assertRegExp('/\.sql/', $commandTester->getDisplay());
        $this->assertContains(".sql.gz", $commandTester->getDisplay());
    }


    public function testAddTimeAutogenerated()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => true,
                '--force'     => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^.*[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', $commandTester->getDisplay());
    }

    public function testAddTimePrefixAutogenerated()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => 'prefix',
                '--force'     => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}.*\.sql$/', $commandTester->getDisplay());
    }

    public function testAddTimeAutogeneratedGzip()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => true,
                '--force'       => true,
                '--compression' => 'gzip',
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^.*[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql.gz$/', $commandTester->getDisplay());
    }


    public function testAddTimeFilenameSpecified()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                'filename' => 'foo.sql',
                '--add-time'     => true,
                '--force'       => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^foo_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', $commandTester->getDisplay());
    }

    public function testAddTimePrefixFilenameSpecified()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                'filename' => 'foo.sql',
                '--add-time'     => 'prefix',
                '--force'       => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}_foo\.sql$/', $commandTester->getDisplay());
    }


    public function testAddTimeOffFilenameSpecified()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                'filename' => 'foo.sql',
                '--force'       => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^foo.sql$/', $commandTester->getDisplay());
    }


    public function testAddTimeFilenameSpecifiedRelative()
    {
        $command = $this->getCommand();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                'filename' => '../foo.sql',
                '--add-time'     => true,
                '--force'       => true,
                '--print-only-filename' => true,
            )
        );

        $this->assertRegExp('/^..\/foo_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', $commandTester->getDisplay());
    }

    public function testWithStripOption()
    {
        $command = $this->getCommand();

        $this->getApplication()->initMagento();

        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => true,
                '--only-command' => true,
                '--force'        => true,
                '--strip'        => '@development not_existing_table_1',
                '--compression'  => 'gzip'
            )
        );

        $dbConfig = $this->getDatabaseConnection()->getConfig();
        $db = $dbConfig['dbname'];

        $this->assertRegExp("/--ignore-table=$db.customer_entity/", $commandTester->getDisplay());
        $this->assertRegExp("/--ignore-table=$db.customer_address_entity/", $commandTester->getDisplay());
        $this->assertRegExp("/--ignore-table=$db.sales_flat_order/", $commandTester->getDisplay());
        $this->assertRegExp("/--ignore-table=$db.sales_flat_order_item/", $commandTester->getDisplay());
        $this->assertRegExp("/--ignore-table=$db.sales_flat_order_item/", $commandTester->getDisplay());
        $this->assertNotContains("not_existing_table_1", $commandTester->getDisplay());
        $this->assertContains(".sql.gz", $commandTester->getDisplay());


        /**
         * Uncompressed
         */
        $commandTester = new CommandTester($command);
        $commandTester->execute(
            array(
                'command'        => $command->getName(),
                '--add-time'     => true,
                '--only-command' => true,
                '--force'        => true,
                '--strip'        => '@development',
            )
        );
        $this->assertNotContains(".sql.gz", $commandTester->getDisplay());

    }

    /**
     * @return \Symfony\Component\Console\Command\Command
     */
    protected function getCommand()
    {
        $dumpCommand = new DumpCommand();
        if (!$dumpCommand->isEnabled()) {
            $this->markTestSkipped('DumpCommand is not enabled.');
        }

        $application = $this->getApplication();
        $application->add($dumpCommand);
        $command = $this->getApplication()->find('db:dump');

        return $command;
    }
}
